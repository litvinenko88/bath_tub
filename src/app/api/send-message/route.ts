import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { name, phone, source } = await request.json()

    if (!name || !phone) {
      return NextResponse.json({ error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 })
    }

    const message = `üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ "–ë–∞–Ω–Ω—ã–µ —á–∞–Ω—ã"

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`

    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text: message
      })
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram')
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API:', error)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}