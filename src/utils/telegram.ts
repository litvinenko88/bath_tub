interface TelegramData {
  name: string
  phone: string
  source?: string
  quizData?: Record<number, string[]>
}

const TELEGRAM_BOT_TOKEN = '8377894078:AAGnvLSJAiRYGjigMw9yYeUeYWzghPw5X7E'
const TELEGRAM_CHAT_ID = '682859146'

export async function sendToTelegram(data: TelegramData): Promise<boolean> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ API route (–¥–ª—è Next.js)
    if (typeof window !== 'undefined' && window.location.origin) {
      try {
        const response = await fetch('/api/telegram', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        })
        
        if (response.ok) {
          return true
        }
      } catch (error) {
        console.log('API route –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É')
      }
    }

    // –ï—Å–ª–∏ API route –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram (–¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤)
    return await sendDirectToTelegram(data)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
    return false
  }
}

async function sendDirectToTelegram(data: TelegramData): Promise<boolean> {
  const { name, phone, source, quizData } = data

  let message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!\n\n`
  message += `üë§ –ò–º—è: ${name}\n`
  message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`
  message += `üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${source || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`

  if (quizData && Object.keys(quizData).length > 0) {
    message += `\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞:\n`
    
    const quizOptions: Record<string, string> = {
      'size-6': '–ë–∞–Ω–Ω—ã–π —á–∞–Ω "–ê–ª—Ç–∞–π" (6 –≥—Ä–∞–Ω–µ–π, 4 —á–µ–ª, √ò 1700–º–º)',
      'size-8': '–ë–∞–Ω–Ω—ã–π —á–∞–Ω "–°–∏–±–∏—Ä—å" (8 –≥—Ä–∞–Ω–µ–π, 6 —á–µ–ª, √ò 1900–º–º)',
      'size-10': '–ë–∞–Ω–Ω—ã–π —á–∞–Ω "–¢–∞–π–≥–∞" (10 –≥—Ä–∞–Ω–µ–π, 10 —á–µ–ª, √ò 2300–º–º)',
      'form-grannaya': '–ì—Ä–∞–Ω–µ–Ω–Ω–∞—è',
      'form-brilliant': '–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è',
      'heating-wood': '–≠–ª–µ–∫—Ç—Ä–æ–ø–µ—á—å',
      'heating-fire': '–ü–æ–¥–æ–≥—Ä–µ–≤ –æ—Ç –∫–æ—Å—Ç—Ä–∞',
      'heating-gas': '–ì–∞–∑–æ–≤–∞—è –ø–µ—á—å',
      'install-wood': '–ú–æ–Ω—Ç–∞–∂ —á–∞–Ω–∞ –Ω–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —Å—Ä—É–±—ã',
      'install-metal': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç–∞–≤–∫—É',
      'addon-hydro': '–ì–∏–¥—Ä–æ–º–∞—Å—Å–∞–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
      'addon-led': '–ú–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω–∞—è LED-–ø–æ–¥—Å–≤–µ—Ç–∫–∞',
      'addon-audio': '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–∞',
      'addon-table': '–°–∫–ª–∞–¥–Ω–æ–π —Å–µ—Ä–≤–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–æ–ª–∏–∫'
    }

    const quizSteps = [
      { id: 1, title: '–†–∞–∑–º–µ—Ä —á–∞–Ω–∞' },
      { id: 2, title: '–§–æ—Ä–º–∞ —á–∞–Ω–∞' },
      { id: 3, title: '–¢–∏–ø –Ω–∞–≥—Ä–µ–≤–∞' },
      { id: 4, title: '–¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏' },
      { id: 5, title: '–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è' }
    ]

    Object.entries(quizData).forEach(([stepId, answers]) => {
      const step = quizSteps.find(s => s.id === parseInt(stepId))
      if (step && Array.isArray(answers) && answers.length > 0) {
        message += `\n${step.title}:\n`
        answers.forEach(answerId => {
          const optionTitle = quizOptions[answerId] || answerId
          message += `‚Ä¢ ${optionTitle}\n`
        })
      }
    })
  }

  message += `\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`

  const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
  
  const response = await fetch(telegramUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'HTML'
    })
  })

  return response.ok
}